package com.zshnb.lambda_ex.group_by;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

public class GroupBy {
    /**
     * Group by list' item, items will in a list with same key(generated by keySelector)
     * */
    public static <K, T> Map<K, List<T>> groupBy(List<T> list, Function<? super T, ? extends K> keySelector) {
        Map<K, List<T>> map = new HashMap<>();
        for (T t : list) {
            K key = keySelector.apply(t);
            if (map.containsKey(key)) {
                List<T> value = map.get(key);
                value.add(t);
            } else {
                map.put(key, new ArrayList<>() {{add(t);}});
            }
        }
        return map;
    }

    /**
     * Group by list' item, items(generated by valueTransformer) will in a list with same key(generated by keySelector)
     * */
    public static <K, T, V> Map<K, List<V>> groupBy(List<T> list,
                                                    Function<? super T, ? extends K> keySelector,
                                                    Function<? super T, ? extends V> valueTransformer) {
        Map<K, List<V>> map = new HashMap<>();
        for (T t : list) {
            K key = keySelector.apply(t);
            if (map.containsKey(key)) {
                List<V> value = map.get(key);
                V v = valueTransformer.apply(t);
                value.add(v);
            } else {
                map.put(key, new ArrayList<>() {{add(valueTransformer.apply(t));}});
            }
        }
        return map;
    }
}